<?php

namespace PhpOffice\PhpSpreadsheet\Calculation\Engine;

class Logger
{
    /**
     * Flag to determine whether a debug log should be generated by the calculation engine
     *        If true, then a debug log will be generated
     *        If false, then a debug log will not be generated.
<<<<<<< HEAD
     */
    private bool $writeDebugLog = false;
=======
     *
     * @var bool
     */
    private $writeDebugLog = false;
>>>>>>> 50f5a6f (Initial commit from local project)

    /**
     * Flag to determine whether a debug log should be echoed by the calculation engine
     *        If true, then a debug log will be echoed
     *        If false, then a debug log will not be echoed
     * A debug log can only be echoed if it is generated.
<<<<<<< HEAD
     */
    private bool $echoDebugLog = false;
=======
     *
     * @var bool
     */
    private $echoDebugLog = false;
>>>>>>> 50f5a6f (Initial commit from local project)

    /**
     * The debug log generated by the calculation engine.
     *
     * @var string[]
     */
<<<<<<< HEAD
    private array $debugLog = [];

    /**
     * The calculation engine cell reference stack.
     */
    private CyclicReferenceStack $cellStack;
=======
    private $debugLog = [];

    /**
     * The calculation engine cell reference stack.
     *
     * @var CyclicReferenceStack
     */
    private $cellStack;
>>>>>>> 50f5a6f (Initial commit from local project)

    /**
     * Instantiate a Calculation engine logger.
     */
    public function __construct(CyclicReferenceStack $stack)
    {
        $this->cellStack = $stack;
    }

    /**
     * Enable/Disable Calculation engine logging.
<<<<<<< HEAD
     */
    public function setWriteDebugLog(bool $writeDebugLog): void
=======
     *
     * @param bool $writeDebugLog
     */
    public function setWriteDebugLog($writeDebugLog): void
>>>>>>> 50f5a6f (Initial commit from local project)
    {
        $this->writeDebugLog = $writeDebugLog;
    }

    /**
     * Return whether calculation engine logging is enabled or disabled.
<<<<<<< HEAD
     */
    public function getWriteDebugLog(): bool
=======
     *
     * @return bool
     */
    public function getWriteDebugLog()
>>>>>>> 50f5a6f (Initial commit from local project)
    {
        return $this->writeDebugLog;
    }

    /**
     * Enable/Disable echoing of debug log information.
<<<<<<< HEAD
     */
    public function setEchoDebugLog(bool $echoDebugLog): void
=======
     *
     * @param bool $echoDebugLog
     */
    public function setEchoDebugLog($echoDebugLog): void
>>>>>>> 50f5a6f (Initial commit from local project)
    {
        $this->echoDebugLog = $echoDebugLog;
    }

    /**
     * Return whether echoing of debug log information is enabled or disabled.
<<<<<<< HEAD
     */
    public function getEchoDebugLog(): bool
=======
     *
     * @return bool
     */
    public function getEchoDebugLog()
>>>>>>> 50f5a6f (Initial commit from local project)
    {
        return $this->echoDebugLog;
    }

    /**
     * Write an entry to the calculation engine debug log.
<<<<<<< HEAD
     */
    public function writeDebugLog(string $message, mixed ...$args): void
    {
        //    Only write the debug log if logging is enabled
        if ($this->writeDebugLog) {
            $message = sprintf($message, ...$args); //* @phpstan-ignore-line
=======
     *
     * @param mixed $args
     */
    public function writeDebugLog(string $message, ...$args): void
    {
        //    Only write the debug log if logging is enabled
        if ($this->writeDebugLog) {
            $message = sprintf($message, ...$args);
>>>>>>> 50f5a6f (Initial commit from local project)
            $cellReference = implode(' -> ', $this->cellStack->showStack());
            if ($this->echoDebugLog) {
                echo $cellReference,
                ($this->cellStack->count() > 0 ? ' => ' : ''),
                $message,
                PHP_EOL;
            }
<<<<<<< HEAD
            $this->debugLog[] = $cellReference
                . ($this->cellStack->count() > 0 ? ' => ' : '')
                . $message;
=======
            $this->debugLog[] = $cellReference .
                ($this->cellStack->count() > 0 ? ' => ' : '') .
                $message;
>>>>>>> 50f5a6f (Initial commit from local project)
        }
    }

    /**
     * Write a series of entries to the calculation engine debug log.
     *
     * @param string[] $args
     */
    public function mergeDebugLog(array $args): void
    {
        if ($this->writeDebugLog) {
            foreach ($args as $entry) {
                $this->writeDebugLog($entry);
            }
        }
    }

    /**
     * Clear the calculation engine debug log.
     */
    public function clearLog(): void
    {
        $this->debugLog = [];
    }

    /**
     * Return the calculation engine debug log.
     *
     * @return string[]
     */
<<<<<<< HEAD
    public function getLog(): array
=======
    public function getLog()
>>>>>>> 50f5a6f (Initial commit from local project)
    {
        return $this->debugLog;
    }
}
